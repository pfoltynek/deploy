services:
  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=gitea,grafana
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d
    expose:
      - "${POSTGRES_PORT:-5432}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_PORT=5050
      
      #iFrame support enable for domain http://your-allowed-domain.com
      #- PGADMIN_CONFIG_X_FRAME_OPTIONS="ALLOW-FROM http://your-allowed-domain.com"
      #- PGADMIN_CONFIG_CONTENT_SECURITY_POLICY="frame-ancestors http://your-allowed-domain.com"

      #iFrame support enable for all domains
      - PGADMIN_CONFIG_X_FRAME_OPTIONS=""
      - PGADMIN_CONFIG_CONTENT_SECURITY_POLICY="frame-ancestors *"

      #Setting for autoconnet to postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${PGADMIN_DB}
    user: root
    ports:
      - ${PGADMIN_PORT:-80}:5050
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
      - ./pgadmin/entrypoint.sh:/entrypoint_custom.sh
    entrypoint: /entrypoint_custom.sh
    networks:
      - internal
    depends_on:
      - postgres

  # gitea:
  #   container_name: gitea
  #   image: gitea/gitea:latest
  #   environment:
  #     - USER_UID=1000
  #     - USER_GID=1000
  #     - GITEA__database__DB_TYPE=postgres
  #     - GITEA__database__HOST=postgres:${POSTGRES_PORT}
  #     - GITEA__database__NAME=gitea
  #     - GITEA__database__USER=${POSTGRES_USER}
  #     - GITEA__database__PASSWD=${POSTGRES_PASSWORD}
  #   restart: always
  #   volumes:
  #     - ./data/gitea:/data
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   ports:
  #     - "${GITEA_PORT:-3001}:3000"
  #     - "${GITEA_PORT_SSH:-2222}:22"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - internal

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    user: "472"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      # - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=true
      
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:${POSTGRES_PORT}
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=${POSTGRES_USER}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}

      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_HOME=/usr/share/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/rpi-monitoring.json
      #support IFrame - needed to view in home assistants
      - GF_SECURITY_ALLOW_EMBEDDING=true
    networks:
      - internal
    ports:
      - "${GRAFANA_PORT:-3003}:3000"
    # env_file:
    #   - ./grafana/.env
    volumes:
      # /!\ To be modified depending on your needs /!\
      - ./data/grafana:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - postgres

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    restart: unless-stopped
    privileged: true
    networks:
      - internal
    expose:
      - 8080
    ports:
      - "${CADVISOR_PORT:-3005}:8080"
    command:
      - '-housekeeping_interval=15s'
      - '-docker_only=true'
      - '-store_container_labels=false'
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    restart: unless-stopped
    networks:
      - internal
    expose:
       - 9100
    ports:
      - "${NODE_EXPORTER_PORT:-3006}:9100"
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    user: "nobody"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=1y'
      # /!\ Uncomment the following line to set a size limit for the Prometheus database /!\
      # - '--storage.tsdb.retention.size=10GB'
    networks:
      - internal
    expose:
      - 9090
    # ports:
    #   - "${PROMETHEUS_PORT:-3004}:9090"
    volumes:
      # /!\ To be modified depending on your needs /!\
      - ./data/prometheus:/prometheus
      - ./prometheus:/etc/prometheus/
    depends_on:
      - cadvisor
      - node-exporter
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter

networks:
  internal:
    driver: bridge
